1.props
	使用场景:父向子,子向父

	父向子
		1.父组件给子组件的标签上添加标签属性
			例如 :msg="msg"

		2.子组件在配置对象中,添加props配置项,用于接收对应的标签属性

		小总结:父给子传递的是数据
	子向父
		1.父组件给子组件的标签上添加标签属性
			属性值应该是一个函数
		2.子组件在配置对象中,添加props配置项,用于接收对应的标签属性
		3.子组件调用父组件传下来的函数,并向函数内部传入实参

		注意:
			传递的函数,必须声明在父组件的methods中
				因为声明在methods中的函数,this一定是当前组件的实例对象
					函数声明在谁的methods中,他的this就一定是谁

		问题:为什么methods中的方法的this一定是当前组件的实例对象
		原因:因为methods中的方法,都会被Vue使用bind方法,强行指定this指向

		小总结:父给子传递的是函数


2.provide/inject
	使用场景:祖先组件向后代组件传参
	流程:
		1.祖先组件在自己的配置对象中,添加provide属性,属性值可以是对象或者函数
		2.后代组件在自己的配置对象中,添加inject属性,属性值可以是数组
		

	注意:
		1.默认情况下,provide暴露出去的数据,并不是响应式的
		2.通过函数形式的provide配合Vue.observable方法,可以实现响应式的效果
		3.如果项目中存在多个provide,那么inject接收的数据,就会从父组件开始逐层想上查找












